{
	"info": {
		"_postman_id": "6eaf34e1-d647-4107-bc49-1fb5c5b65370",
		"name": "Student_API_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27152421",
		"_collection_link": "https://lively-zodiac-244755.postman.co/workspace/My-Workspace~72013560-8a3e-4880-8a29-53356a83200d/collection/27152421-6eaf34e1-d647-4107-bc49-1fb5c5b65370?action=share&source=collection_link&creator=27152421"
	},
	"item": [
		{
			"name": "Get Student List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Successful GET request\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Content-Type header is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"// Parse JSON response",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response is an array\", () => {",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"At least one student exists\", () => {",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"});",
							"",
							"// Check structure of each student",
							"jsonData.forEach((student, index) => {",
							"    pm.test(`Student ${index + 1} has required fields`, () => {",
							"        pm.expect(student).to.have.property(\"id\");",
							"        pm.expect(student).to.have.property(\"name\");",
							"        pm.expect(student).to.have.property(\"location\");",
							"        pm.expect(student).to.have.property(\"phone\");",
							"        pm.expect(student).to.have.property(\"courses\");",
							"    });",
							"",
							"    pm.test(`Student ${index + 1} field types are valid`, () => {",
							"        pm.expect(student.id).to.be.a(\"string\");",
							"        pm.expect(student.name).to.be.a(\"string\");",
							"        pm.expect(student.location).to.be.a(\"string\");",
							"        pm.expect(student.phone).to.be.a(\"string\");",
							"        pm.expect(student.courses).to.be.an(\"array\");",
							"    });",
							"});",
							"",
							"// Optional: Check a known student is present (like Tithi Paul)",
							"pm.test(\"Student list contains Tithi Paul\", () => {",
							"    const found = jsonData.some(s => s.name === \"Tithi Paul\" && s.phone === \"01712345678\");",
							"    pm.expect(found).to.be.true;",
							"});",
							"",
							"//json scema validation",
							"",
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": { \"type\": \"string\" },",
							"      \"name\": { \"type\": \"string\" },",
							"      \"location\": { \"type\": \"string\" },",
							"      \"phone\": { \"type\": \"string\" },",
							"      \"courses\": {",
							"        \"type\": \"array\",",
							"        \"items\": { \"type\": \"string\" }",
							"      }",
							"    },",
							"    \"required\": [\"id\", \"name\", \"location\", \"phone\", \"courses\"]",
							"  }",
							"};",
							"",
							"pm.test(\"Student list schema is valid\", () => {",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Successful GET request\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Status code name has string\", () => {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Content-Type header is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\"))",
							"      .to.eql(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Test data type of the response\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.name).to.be.a(\"string\");",
							"    pm.expect(typeof jsonData.id === \"number\" || typeof jsonData.id === \"string\").to.be.true;",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");",
							"});",
							"",
							"pm.expect(jsonData.courses).to.include(\"API Testing\");",
							"pm.expect(jsonData.courses)",
							"  .to.have.members([\"API Testing\",\"MySQL\"]);",
							"pm.expect(jsonData.courses.length).to.be.above(0);",
							"",
							"pm.test(\"value of field in response\", () => {",
							"    pm.expect(jsonData.id).to.eql(\"4\");",
							"    pm.expect(jsonData.name).to.eql(\"Emma\");",
							"    pm.expect(jsonData.location).to.eql(\"Australia\");",
							"    pm.expect(jsonData.phone).to.eql(\"01174285385\");",
							"    pm.expect(jsonData.courses[0]).to.eql(\"API Testing\");",
							"    pm.expect(jsonData.courses[1]).to.eql(\"MySQL\");",
							"});",
							"",
							"//json schema validation",
							"var schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": { \"type\": \"string\" },",
							"    \"name\": { \"type\": \"string\" },",
							"    \"location\": { \"type\": \"string\" },",
							"    \"phone\": { \"type\": \"string\" },",
							"    \"courses\": {",
							"      \"type\": \"array\",",
							"      \"items\": { \"type\": \"string\" }",
							"    }",
							"  },",
							"  \"required\": [\"id\", \"name\", \"location\", \"phone\", \"courses\"]",
							"};",
							"",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Status Code Check",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// ✅ Content-Type Check",
							"pm.test(\"Content-Type is application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// ✅ Parse response JSON",
							"const jsonData = pm.response.json();",
							"",
							"",
							"// ✅ Schema Validation (optional)",
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": { \"type\": \"string\" },",
							"    \"name\": { \"type\": \"string\" },",
							"    \"location\": { \"type\": \"string\" },",
							"    \"phone\": { \"type\": \"string\" },",
							"    \"courses\": {",
							"      \"type\": \"array\",",
							"      \"items\": { \"type\": \"string\" }",
							"    }",
							"  },",
							"  \"required\": [\"id\", \"name\", \"location\", \"phone\", \"courses\"]",
							"};",
							"",
							"pm.test(\"Schema is valid for deleted student\", () => {",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/17",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"17"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student List",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hridoy\",\n    \"location\": \"Bangladesh\",\n    \"phone\": \"01708609927\",\n    \"courses\": [\n    \"Python\",\n    \"DSA\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code check",
							"pm.test(\"Status code is 201 (Created)\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// 2. Content-Type check",
							"pm.test(\"Content-Type is application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// 3. Parse JSON response",
							"const jsonData = pm.response.json();",
							"",
							"// 4. Basic response field check",
							"pm.test(\"Response contains student data\", () => {",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData.name).to.eql(\"Tithi Paul\");",
							"    pm.expect(jsonData.location).to.eql(\"Bangladesh\");",
							"    pm.expect(jsonData.phone).to.eql(\"01712345678\");",
							"    pm.expect(jsonData.courses).to.be.an(\"array\").that.includes(\"API Testing\");",
							"});",
							"",
							"// 5. Validate courses fully",
							"pm.test(\"Courses are correct\", () => {",
							"    pm.expect(jsonData.courses).to.have.members([\"API Testing\", \"Postman\", \"Manual Testing\"]);",
							"});",
							"",
							"// 6. Schema validation",
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": { \"type\": \"string\" },",
							"    \"name\": { \"type\": \"string\" },",
							"    \"location\": { \"type\": \"string\" },",
							"    \"phone\": { \"type\": \"string\" },",
							"    \"courses\": {",
							"      \"type\": \"array\",",
							"      \"items\": { \"type\": \"string\" }",
							"    }",
							"  },",
							"  \"required\": [\"id\", \"name\", \"location\", \"phone\", \"courses\"]",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Tithi Paul\",\n  \"location\": \"Bangladesh\",\n  \"phone\": \"01712345678\",\n  \"courses\": [\n    \"API Testing\",\n    \"Postman\",\n    \"Manual Testing\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		}
	]
}